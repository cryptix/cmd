// Generated by vfsgen; do not edit.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"net/http"
	"os"
	"time"
)

// assets statically implements the virtual filesystem given to vfsgen as input.
var assets = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := _vfsgen_fs{
		"/": &_vfsgen_dirInfo{
			name:    "/",
			modTime: mustUnmarshalTextTime("2015-08-06T11:43:23.532789126Z"),
		},
		"/bootstrapProgressbar.min.js": &_vfsgen_compressedFileInfo{
			name:              "bootstrapProgressbar.min.js",
			modTime:           mustUnmarshalTextTime("2014-12-21T15:01:48.097961951Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xc1\x72\xe3\x36\x0f\xbe\xff\x4f\xa1\x70\xfe\x7a\xc8\x84\xa6\xbd\xdb\xed\x4c\x47\x2e\x37\x87\x1c\x3a\x39\xec\xce\x74\x9a\xbb\x87\x91\x20\x89\x5b\x99\xd4\x90\x94\x9d\xd4\xd6\xb3\xf4\x61\xfa\x62\x05\x65\xd9\x96\xed\xcd\x76\x2f\x3d\xc4\x22\x89\x0f\x20\x00\x02\x1f\x32\xbb\xbd\x49\x9e\xad\x0d\x3e\x38\xd5\x4c\x1b\x67\x4b\x07\xde\x3f\x2b\x97\xac\xe7\xe2\x67\xf1\x21\xd9\x25\x0f\xb6\x79\x75\xba\xac\x42\x42\x33\x96\xbc\x9f\xbf\x7b\x3f\xc5\x9f\x0f\xc9\xef\x01\x9a\x4a\x99\xe4\x57\x67\xff\xfe\x0b\x71\x9f\x1e\x9f\x92\x5a\x67\x60\x3c\xe0\xae\x0a\xa1\x49\x67\xb3\xcd\x66\x23\x56\xda\xe4\x79\xeb\x83\xc8\xec\x2a\xb9\x9d\xfd\xef\xa6\x68\x4d\x16\xb4\x35\x34\xb0\x2d\x69\x11\x8e\xb7\xeb\x2c\x90\xc5\x1a\xef\x05\x79\x14\x1b\xae\xd8\x36\x54\xda\x8b\xff\x43\x0d\x2b\x30\x41\x06\x6a\x18\xef\x8f\x6c\x13\x31\x5e\x06\x01\x2f\x01\x4c\x4e\xb7\x1d\x07\x91\x43\xa1\xda\x3a\x78\xd4\xec\x16\xa7\xad\xdc\x62\x7c\xc6\xeb\xa8\xb2\xcc\xa1\x56\xaf\xe9\x8f\xf3\x39\x77\x50\x60\xb8\xd5\xd2\x37\x00\x79\xfa\xd3\x9c\xe7\xda\x37\x28\x5c\x06\xb4\x99\x12\x63\x0d\x10\x8e\x0e\x2e\x1b\x70\x18\x58\x50\x25\xa4\x37\x73\x3e\xec\x96\x85\x75\x2b\x15\xd2\x71\x38\x0e\x42\xeb\x4c\x12\xee\xc8\x0f\xa4\xe3\x6a\x65\xdb\xaf\xe1\x38\x8c\x91\xc9\x2c\x21\x77\xd0\xf1\xb6\xc9\x55\x80\x34\x08\x63\x6d\xc3\x73\xbc\xfc\xb0\x2e\x94\xae\x87\x75\x0c\x12\x9f\x29\xd8\xf0\xda\x80\x38\x45\x75\xca\x1a\xdb\xc6\x34\x1a\x79\x96\x38\xae\xa4\x11\x8d\x72\xb8\xa4\x8c\xfb\x41\xf8\xac\xb2\x3f\xfa\x58\xb9\x1b\x4e\x0a\x67\xd1\xe1\xfe\x48\xcb\x71\x9e\xb9\x95\xa8\xee\xe1\x11\x0d\x18\xa1\x42\x70\x94\xa0\xbb\x6a\x7a\x72\xa1\xb4\xaa\x26\x8c\xf1\xea\x1a\xa9\x9c\x56\xd3\xb5\xaa\x5b\xc0\x62\x40\xcc\x6e\x87\xb9\xfe\x26\x4c\xbd\xf4\xb0\x77\xf8\x4a\x85\x54\xa2\x52\xfe\xa1\x56\xde\x53\xb2\x06\x17\x74\x16\x6f\xe2\x8d\xd4\x62\x9f\xb4\xc9\x84\x1c\xe2\x27\x52\xc6\xd4\xd8\x22\x39\x08\xef\x0f\x8b\xf4\x54\x10\xc3\x09\x6f\xd1\x44\xcc\xf4\x1b\x06\xa2\xe8\x7e\xff\x19\x2b\xc7\x3d\xcf\x50\x35\x3e\xcc\x1b\xaa\x51\x74\xbf\xff\x8c\x55\xe3\x7e\xa1\x0b\xaa\xfd\x67\xf5\x99\x5a\xc6\x86\x3a\x58\x5b\x9d\x27\xd9\x57\x73\x9a\x18\x1b\x12\x0f\x81\xb0\xbe\x41\x6a\xf9\x49\x85\x4a\x38\x2c\xad\x9c\x62\x7e\x6e\xa9\x9d\x56\x6c\x46\x73\xfc\x65\xd1\x34\x89\xc5\x09\x0e\x9d\x89\xc1\x8d\x2a\x7a\x32\xb9\xf1\xf8\xe7\x0e\x4d\x75\x7c\x7e\x89\x05\x41\xc9\x2f\xbe\x51\xe6\x23\x61\x42\xe5\xf9\x90\xec\x11\x21\x4c\x23\x7a\x1a\xd1\x88\x68\x1c\x34\xd8\x73\x4f\x96\xaa\xa1\x1d\x47\x95\x23\xdd\x77\x58\xeb\xe1\xd7\xe6\xcc\x3e\xc6\x72\x51\xdc\xd3\x12\xdf\x3d\x8b\x7a\x15\x44\xfa\xc1\x07\xf7\xfd\x7e\xbb\xdf\xa7\x25\x27\xb5\x36\x30\x1d\xc4\x69\xd9\x31\xee\xfe\x15\x11\xe8\x06\xf9\xc8\x6e\x98\x40\x57\xf4\x9f\x40\x47\x8d\xf3\x9f\xdc\xd8\x31\x96\x9e\x62\xd9\xe8\x3c\x54\xe4\xa8\xd6\x6f\xbf\xdf\xaf\xb7\xb4\xf1\x8e\x0e\x2b\xe4\x49\xaf\xc0\xb6\x81\x5e\x70\x01\xf2\x0d\xcf\x78\xc9\x97\x98\x55\x73\x16\x20\xaf\x23\x51\xb1\xd4\x8c\xcd\x0f\x87\xfd\x43\xbc\x48\x34\xfb\x18\xcb\x09\xdb\x72\x6c\x17\xdf\x27\x43\x4a\xd9\xdb\x41\x4a\x89\x2e\x1e\x36\x18\x6f\x94\xf5\xd6\x06\xd1\xb0\xc6\x30\x2f\xab\x37\x9b\x95\x8c\xc3\xf8\xb4\xba\xc3\xb3\xdb\x7d\x3d\xf3\xf0\x51\x62\x87\xd1\x20\x6b\x04\x59\xde\x46\xfe\xcf\x6a\x50\xee\xe8\xd4\x0b\xa2\xf6\x54\x7d\x73\x5d\xf0\x74\x19\x39\xe2\x8c\xc1\xb1\x29\xcf\x09\x1c\x79\x3b\xd5\xe2\x8c\xab\x29\xf0\x9c\x57\x68\xb7\xd0\x75\x7d\xdd\x48\x98\xc5\xf8\xa1\x4b\x96\x7e\xa3\xd9\xa8\x3f\xa0\xf0\xbd\x86\x15\xfa\x7a\x4d\x76\xc6\x6e\x08\x8e\x04\xde\xe0\x64\x30\xac\xe3\x5a\x9c\x0d\xa6\xfe\xe4\x72\x7e\xe1\x78\x1b\x68\x5e\x14\x46\x8c\x3a\x6b\x71\x79\x30\x9a\xa7\xa7\xa9\x13\x5b\x16\x54\x56\x5d\x96\x8a\xc2\xd6\x8d\xc2\x38\x23\x94\x88\x64\x44\xc9\xb3\x1f\x9b\x8b\xd5\x27\x89\x7d\xfe\x02\x38\xb1\x8f\x7c\x67\x26\x13\xb3\xf0\xbb\xdd\x1b\x3a\x68\xcd\xc0\x26\x81\xde\x36\x77\x2c\x36\xd6\x29\x22\x8a\xf5\xdb\xf1\x4b\xbf\xc5\x03\x8e\x9d\xe0\xda\x2c\x58\x27\xe1\x5a\x6c\x2c\x02\x0a\xfc\x8f\x23\x8c\x67\xdf\x21\xc0\xcb\x24\x98\x9e\xa6\xba\x6e\xe8\x32\xf1\xe5\xb7\x16\xdc\x2b\x5b\xfc\x13\x00\x00\xff\xff\x88\xdf\x7e\xc4\x01\x09\x00\x00"),
			uncompressedSize:  2305,
		},
		"/dist": &_vfsgen_dirInfo{
			name:    "dist",
			modTime: mustUnmarshalTextTime("2015-08-06T11:41:55.283212874Z"),
		},
		"/list.tmpl": &_vfsgen_compressedFileInfo{
			name:              "list.tmpl",
			modTime:           mustUnmarshalTextTime("2015-08-06T11:42:02.973175894Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\x5b\x53\x1b\x21\x18\x7d\xb6\xbf\x02\x79\xc9\x53\xc2\x58\xb5\xb7\x21\x3b\x53\x8d\xd1\x56\xdb\xe6\xa2\x76\xf4\xa5\x43\x16\x92\x65\x65\x2f\xc2\xb7\xd1\x4d\x26\xff\xbd\xc0\xee\x26\x1a\xdb\x19\x3b\x7d\xc9\x1e\xf8\xf8\xce\x39\x1c\x20\x74\xb7\xf7\xe3\xf8\xf2\x66\x70\x82\x22\x48\x54\xf0\x86\x56\x9f\x1d\x1a\x09\xc6\xed\x77\x87\x26\x02\x18\x0a\x23\xa6\x8d\x80\x2e\x2e\x60\xda\xfe\x80\x7d\x01\x24\x28\x11\x4c\xa5\x12\x5c\x67\x39\x25\xd5\xd8\x55\x4c\xa8\x65\x0e\xc8\xe8\xb0\x8b\x89\xcc\xa7\x86\x0c\x93\xc9\x51\x31\xbd\x4d\x8e\xd9\xfe\xc9\xdd\xc1\x19\x1f\x7f\xbb\x7b\x98\x8d\xd3\xd3\xc3\xf7\x57\x03\x5d\x3e\x9c\xcd\x16\xf1\x3e\x44\xe5\xfd\x22\x1a\x5e\x8c\xce\x49\x7c\x5f\x08\x5d\xb6\xdf\x76\xf6\x3a\x07\x9d\x44\xa6\x9d\xd8\x60\x04\x65\x2e\xba\x18\xc4\x23\x90\x98\xcd\x59\x25\x82\x03\x4a\x2a\x14\x78\x69\x25\xd3\x3b\xa4\x85\xea\x62\x03\xa5\x12\x26\x12\x02\x30\x8a\xb4\x98\x6e\xac\xf0\x7e\x71\x76\x30\xea\x9d\x5e\x3f\x9a\x41\xff\xe2\x91\xc9\x8f\xd0\xef\x8f\x2e\xa3\x85\x89\x39\x3f\x8d\x87\xd7\xfc\xe7\x68\x78\x78\xfe\xee\xf2\xe6\x6b\x8f\x84\xc6\x90\x49\x96\x81\x01\xcd\x72\xef\xc5\xce\xe0\xbf\x6e\xf3\x9f\xb8\xe3\x6d\xea\xd7\x6c\xf3\x85\x32\x33\xf6\x64\x9e\x30\x0d\x74\x36\xd3\xc2\x98\x09\xd3\xff\x4d\x5a\xe4\x2a\x63\xbc\x90\xaf\x24\xa1\xa4\xbe\x36\x74\x92\xf1\xd2\xb3\x72\x39\x47\xa1\xb2\x74\x5d\x1c\x66\x29\x30\x99\x0a\x5d\xc5\x17\xed\x05\x57\x9e\x1e\xf5\xed\x1d\xb2\xad\x7b\x7e\x3a\x77\xbf\x3b\x63\xa1\x44\x08\xbe\xf2\xc9\x8d\xa9\x4c\xf3\x02\x2a\x0b\x2d\x77\xe7\x5a\x48\xf2\x6e\xeb\x97\x87\xc1\x8b\x15\x93\x02\x20\x4b\xeb\x35\xa6\x98\x24\x12\x5a\x68\xce\x54\x61\x6b\x95\xe8\xae\xef\xa2\x24\xdf\x76\x99\xd7\xf1\xa1\x06\xb4\x6d\xaa\x32\x17\x1c\xb1\x10\xe4\x5c\xe0\x4a\xed\x0f\x1d\x6d\x9b\x38\x7a\x3a\x68\x3a\x31\xd2\x99\x12\x9b\x85\xb6\xe4\x62\xb3\x14\x95\x07\x0f\xea\x48\x2e\xa4\x01\x94\x4d\x91\xdb\x98\x59\x87\x02\x6c\xa2\x44\xa3\xe7\x07\xf5\x1b\x6c\x9e\xa9\x85\xda\x7f\x2d\xe0\xc1\x77\x96\xd8\x40\x81\x6f\x66\xc6\x72\xb1\x99\xb1\x40\x57\xca\xeb\x7e\x0a\xcd\x89\x2d\x97\x9a\xa5\x33\x81\x3a\xab\x95\x5b\xbb\x5c\xca\x29\xea\x7c\x31\x3d\xa9\x9b\x09\xa1\x8c\xa8\xf0\x33\x51\xca\xea\x77\xe6\xad\x93\xe5\xb2\xe3\x6c\xac\x56\x38\x58\x43\x4a\x58\xf0\xdc\x97\x2d\x39\x6b\xab\x15\x3a\x2a\xc1\x6d\x78\xcb\xa2\x93\x4b\xb9\x57\xdb\x20\x5b\x5c\xdf\x2f\xe2\xd3\x58\xc7\x77\x2b\x73\x97\x1e\x53\x6a\x2b\xc1\xc6\x1c\xe1\xd9\x43\xea\x2e\xc0\x67\xa5\x70\xd0\xab\x07\xce\xd8\xe6\x28\x28\xa9\xe8\x6d\xb3\xff\x37\xfc\x1d\x00\x00\xff\xff\x4f\xd8\x12\x0b\x25\x05\x00\x00"),
			uncompressedSize:  1317,
		},
		"/uploadui.js": &_vfsgen_compressedFileInfo{
			name:              "uploadui.js",
			modTime:           mustUnmarshalTextTime("2014-12-21T15:01:48.098087662Z"),
			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x54\x51\x6f\xd3\x30\x10\x7e\xe7\x57\x9c\xa6\x49\x76\xa0\x33\x45\xe2\x69\x53\x5f\x60\x43\x80\x36\x8a\xe8\x90\x90\xa6\xa9\x72\x93\x6b\x1b\xcd\xb5\x83\x7d\xd9\xa8\xaa\xfe\x77\xce\x49\x9a\x46\x69\xc0\x0f\x95\x7b\xf9\xee\xbb\xef\x2e\xf7\x25\x73\x69\xb9\x41\x4b\x4a\x67\xd9\xcd\x33\x5f\x6e\xf3\x40\x68\xd1\xcb\xb3\xeb\xe9\xdd\x47\x67\x29\xc6\x9c\xce\x30\x3b\x1b\xc1\xb2\xb4\x29\xe5\xce\x4a\x8c\xd0\x04\x76\xf0\x0a\xf8\x3c\x6b\x0f\xf3\x50\x2e\x36\x39\xc1\x04\x5a\xca\x15\xd2\x8d\xc1\x78\xfd\xb0\xfd\x92\x49\xd1\x40\x44\x32\xaa\xd3\xe6\xcb\xdc\xe0\x7f\x13\x22\x40\x24\x57\x15\xba\xad\x74\x5e\x2c\x38\xe9\x5c\x0a\x55\x78\xb7\xf2\x18\x02\xb4\xb7\x8b\x85\xf6\x31\xa1\x05\x97\x85\x61\xf1\x8c\x6f\xa5\x27\xbb\xfa\x69\x3c\xf9\x52\x56\x35\x54\xfc\x09\xca\xa0\x5d\xd1\x1a\x26\x93\x09\x8c\x19\x06\x9d\xe3\x91\x4a\x6f\xaf\xda\xd8\xfe\x48\x12\xcb\x64\x9a\x34\x17\xb1\xf8\x02\x9f\x9c\xdf\x5c\xf3\x5f\x99\x1c\xd1\xf1\xb1\xd2\x45\x81\x96\xbb\x5a\xd6\x9a\xc4\x08\x3a\xb5\x1f\xc6\x8f\x07\xd9\x07\x4e\x8f\xbf\x4b\x0c\xd4\xd0\xfe\xba\xbb\xfd\x4c\x54\xfc\xa8\x83\x5d\xf2\x06\xa7\x9c\xf5\xa8\xb3\x6d\x20\x4d\x98\xae\xb5\x5d\x61\xaf\xed\x6e\x3f\xdc\xf9\x21\xaf\xca\x9a\xc5\x2c\xee\x1c\xde\xf7\x80\xf1\x90\xdf\xc2\x69\xf4\xa8\x33\x14\x5c\xe9\xeb\x6c\xfa\x4d\x15\xda\x07\xec\x30\x87\xc2\xd9\x80\x1d\xb1\xed\xfc\x20\xd5\x94\xae\x41\xe2\x40\xbd\x1e\xf3\x30\x20\x9e\xd8\x6b\x19\x2e\x41\xa0\xf7\xce\x8b\xd1\x3f\x81\xf1\x05\x30\xec\xa7\x7d\xb2\xee\xc5\x42\x05\x07\x97\xa6\xa5\xf7\x98\x5d\xc2\x83\x80\x37\xd0\x57\x7d\x8f\x7f\x88\xc3\xe2\x51\x0c\xd2\xee\x07\x9a\x3a\x89\x68\x83\x9e\x64\x64\x54\xb5\xd6\x48\xc8\x42\xaa\x72\x1c\x8c\xba\x7a\xd3\x39\x92\xec\x3b\x0b\x71\x10\x57\xef\xce\xa9\x5b\xc5\xc1\x01\xa2\xeb\xd2\xde\x6c\xd9\x39\x4a\x13\x31\x3a\xd6\xbd\x20\xaf\x6d\xc8\x23\x72\xe5\xb4\xe1\xc4\x3b\x4d\x6b\x95\x62\x6e\x24\x2a\x53\x79\xfe\x35\xbc\x1b\x8f\xdf\xa2\x22\x47\xda\x24\x49\xeb\x33\xb6\x99\xdc\x65\x79\x28\x8c\xde\xce\x89\x07\xc5\x3d\xf1\x1e\x1b\xb1\xef\x74\xb3\x67\x29\xda\x54\xaf\xff\x74\x59\xd9\x0b\x52\x7c\x9f\xce\xee\xb9\xae\x68\x1c\x31\xb0\xd4\x21\x5a\xa6\x33\xa5\xc6\x77\xcd\xa7\x64\x60\x0e\xa9\xc9\xd3\x27\xe6\xac\x29\x39\x8b\x15\xfd\x0d\x00\x00\xff\xff\xc6\xbd\xd8\xc5\xe5\x04\x00\x00"),
			uncompressedSize:  1253,
		},
	}

	fs["/"].(*_vfsgen_dirInfo).entries = []os.FileInfo{
		fs["/bootstrapProgressbar.min.js"].(os.FileInfo),
		fs["/dist"].(os.FileInfo),
		fs["/list.tmpl"].(os.FileInfo),
		fs["/uploadui.js"].(os.FileInfo),
	}

	return fs
}()

type _vfsgen_fs map[string]interface{}

func (fs _vfsgen_fs) Open(path string) (http.File, error) {
	// TODO: Maybe clean path?
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *_vfsgen_compressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &_vfsgen_compressedFile{
			_vfsgen_compressedFileInfo: f,
			gr: gr,
		}, nil
	case *_vfsgen_dirInfo:
		return &_vfsgen_dir{
			_vfsgen_dirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// _vfsgen_compressedFileInfo is a static definition of a gzip compressed file.
type _vfsgen_compressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *_vfsgen_compressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *_vfsgen_compressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *_vfsgen_compressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *_vfsgen_compressedFileInfo) Name() string       { return f.name }
func (f *_vfsgen_compressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *_vfsgen_compressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *_vfsgen_compressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *_vfsgen_compressedFileInfo) IsDir() bool        { return false }
func (f *_vfsgen_compressedFileInfo) Sys() interface{}   { return nil }

// _vfsgen_compressedFile is an opened compressedFile instance.
type _vfsgen_compressedFile struct {
	*_vfsgen_compressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *_vfsgen_compressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f._vfsgen_compressedFileInfo.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.ReadFull(f.gr, make([]byte, f.seekPos-f.grPos))
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *_vfsgen_compressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case os.SEEK_SET:
		f.seekPos = 0 + offset
	case os.SEEK_CUR:
		f.seekPos += offset
	case os.SEEK_END:
		f.seekPos = f._vfsgen_compressedFileInfo.uncompressedSize + offset
	}
	return f.seekPos, nil
}
func (f *_vfsgen_compressedFile) Close() error {
	return f.gr.Close()
}

// _vfsgen_dirInfo is a static definition of a directory.
type _vfsgen_dirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *_vfsgen_dirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *_vfsgen_dirInfo) Close() error               { return nil }
func (d *_vfsgen_dirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *_vfsgen_dirInfo) Name() string       { return d.name }
func (d *_vfsgen_dirInfo) Size() int64        { return 0 }
func (d *_vfsgen_dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *_vfsgen_dirInfo) ModTime() time.Time { return d.modTime }
func (d *_vfsgen_dirInfo) IsDir() bool        { return true }
func (d *_vfsgen_dirInfo) Sys() interface{}   { return nil }

// _vfsgen_dir is an opened dir instance.
type _vfsgen_dir struct {
	*_vfsgen_dirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *_vfsgen_dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == os.SEEK_SET {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d._vfsgen_dirInfo.name)
}

func (d *_vfsgen_dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d._vfsgen_dirInfo.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d._vfsgen_dirInfo.entries)-d.pos {
		count = len(d._vfsgen_dirInfo.entries) - d.pos
	}
	e := d._vfsgen_dirInfo.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
